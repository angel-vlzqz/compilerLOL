lexer --> parser --> parser:
                        1. verifies compliance with grammar
                        2. generates appropriate syntax errors (if any)
                        3. updates/manages symbol table
                        4. generates an abstract syntax tree (AST)

parser --> AST --> semantic analyzer:
                        1.
                        2.
                        3.

semantic analyzer --> (TBD 1) --> Optimizer --> (TBD 1) --> code generator

--------------------------------------------------------------------------
- source code:....... --> assembly code:
- syntax validation
- code structure validation (e.g. sequence of commands) aka: semantic analysis
- pseudo code generation (to simplify assembly code generation)
- assembly code generation


semantic analysis
-----------------
1. variable declaration check
2. type check

we need an inventory of all variables declared, aka SYMBOL TABLE

Index   ItemName   ItemValue   ItemType
---------------------------------------
0       ID         x           int
1       ID         y           int

Parser:
- syntax is correct
                prog
              /      \
           write      =
                    /   \
                  z      m
                       /   \
                      x     +
                          /   \
                         1     +
                             /   \
                            y    100

optimization rule 1: constant propagation
T0 = 1
T1 = 2 + T0

becomes:
T1 = 2 + 1

optimization rule 2: constant folding
T1 = 2 + 1

becomes:
T1 = 3