#ifndef SYMBOL_TABLE_H
#define SYMBOL_TABLE_H

// Include necessary libraries
#include <stdlib.h>

typedef struct Symbol {
    char *name;              // The name of the symbol
    char *type;              // The type of the symbol (e.g., int, float, etc.)
    int index;               // The index generated by the hash function
    struct Symbol *next;     // Pointer to the next symbol in the list (linked list)
} Symbol;

// SymbolTable structure to store the hash table (array of symbol pointers)
typedef struct SymbolTable {
    int size;
    Symbol **table; // Array of symbol pointers (linked list heads)
} SymbolTable;

// Function Declerations
unsigned int hashFunction(const char *name, int tableSize);
SymbolTable* createSymbolTable(int size); 
Symbol* createSymbol(const char *name, const char *type, int index);
void insertSymbol(SymbolTable *symbolTable, const char *name, const char *type);
Symbol* findSymbol(SymbolTable *symbolTable, const char *name);
void freeSymbolTable(SymbolTable *symbolTable);

#endif // SYMBOL_TABLE_H
